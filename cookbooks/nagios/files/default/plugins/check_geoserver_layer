#!/bin/bash

# Written by Dan Fruehauf <dan.fruehauf@utas.edu.au>

#
# This script checks a Geoserver layer
# Example usage:
# check_geoserver_layer -t wfs -n imos -l aatams_sattag_nrt_wfs -u https://geoserver-123.aodn.org.au/geoserver -w 5 -c 10
# check_geoserver_layer -t wms -n imos -l argo_profile_layer -u https://geoserver.imos.org.au/geoserver -w 5 -c 10
# This will alert if the layer is missing, or the request takes too long.
#

# append these to WMS requests
declare -r WMS_REQUEST_SUFFIX="FORMAT=image/png&VERSION=1.1.1&REQUEST=GetMap&BBOX=110,-50,160,-3&WIDTH=1&HEIGHT=1"

# append these to WFS requests
declare -r WFS_REQUEST_SUFFIX="version=1.0.0&request=GetFeature&maxFeatures=50&outputFormat=csv"

# Note: we append a 'date' parameter to each of the above URLs, to workaround any caching in geoserver (which would
# invalidate the timeout checks).

# checks a geoserver layer
# $1 - ip address
# $2 - geoserver URL
# $3 - layer type
# $4 - layer namespace
# $5 - layer name
# $6 - warning timeout
# $7 - critical timeout
# $8 - no cache (0 for allowing cached requests, 1 for not)
check_geoserver_layer() {
    local ip_address=$1; shift
    local url="$1"; shift
    local type="$1"; shift
    local namespace="$1"; shift
    local layer="$1"; shift
    local -i warning_timeout=$1; shift
    local -i critical_timeout=$1; shift
    local -i no_cache=$1; shift

    ${type}_check_geoserver_layer $ip_address $url $namespace $layer $warning_timeout $critical_timeout $no_cache
}

# checks a WMS geoserver layer
# $1 - ip address
# $2 - geoserver URL
# $3 - layer namespace
# $4 - layer name
# $5 - warning timeout
# $6 - critical timeout
# $7 - no cache (0 for allowing cached requests, 1 for not)
wms_check_geoserver_layer() {
    local ip_address=$1; shift
    local url="$1"; shift
    local namespace="$1"; shift
    local layer="$1"; shift
    local -i warning_timeout=$1; shift
    local -i critical_timeout=$1; shift
    local -i no_cache=$1; shift

    local check_url="${url}/$namespace/$type?LAYERS=$namespace:$layer&SERVICE=WMS&$WMS_REQUEST_SUFFIX"

    local tmp_output=`mktemp`
    _check_geoserver_layer $ip_address "$check_url" $type:$namespace:$layer $warning_timeout $critical_timeout $no_cache $tmp_output
    local -i retval=$?

    # if result is supposedly OK, make sure we got a PNG back
    if [ $retval -eq 0 ]; then
        # check file type - must be a PNG!
        if ! file $tmp_output | grep -q ": PNG image data\b"; then
            ERROR_STRING="Returned file is not a PNG, check $check_url | $PERF_DATA"
            retval=2
        fi
    fi

    rm -f $tmp_output
    return $retval
}

# checks a WFS geoserver layer
# $1 - ip address
# $2 - geoserver URL
# $3 - layer namespace
# $4 - layer name
# $5 - warning timeout
# $6 - critical timeout
# $7 - no cache (0 for allowing cached requests, 1 for not)
wfs_check_geoserver_layer() {
    local ip_address=$1; shift
    local url="$1"; shift
    local namespace="$1"; shift
    local layer="$1"; shift
    local -i warning_timeout=$1; shift
    local -i critical_timeout=$1; shift
    local -i no_cache=$1; shift

    local check_url="${url}/$namespace/$type?typeName=$namespace:$layer&SERVICE=WFS&$WFS_REQUEST_SUFFIX"

    local tmp_output=`mktemp`
    _check_geoserver_layer $ip_address "$check_url" $type:$namespace:$layer $warning_timeout $critical_timeout $no_cache $tmp_output
    local -i retval=$?

    # if result is supposedly OK, make sure we got some features
    if [ $retval -eq 0 ]; then
        # zero lines in file? bad news.
        if [ `wc -l $tmp_output | cut -d' ' -f1` -eq 0 ]; then
            ERROR_STRING="Layer $type:$namespace:$layer has no features, check $check_url | $PERF_DATA"
            retval=2
        elif grep -q 'ServiceException' $tmp_output; then
            ERROR_STRING="Layer $type:$namespace:$layer returned exception, does it exist? check $check_url | $PERF_DATA"
            retval=2
        fi
    fi

    rm -f $tmp_output
    return $retval
}

# checks a generic geoserver layer
# $1 - ip address
# $2 - URL
# $3 - layer name (for nagios messages)
# $4 - warning timeout
# $5 - critical timeout
# $6 - no cache (0 for allowing cached requests, 1 for not)
_check_geoserver_layer() {
    local ip_address=$1; shift
    local url="$1"; shift
    local layer_name=$1; shift
    local -i warning_timeout=$1; shift
    local -i critical_timeout=$1; shift
    local -i no_cache=$1; shift
    local output_file=$1; shift

    if [ $no_cache -eq 1 ]; then
        url="$url&date="`date +%s`
    fi

    # resolve host to specific ip address
    local host=`echo $url | cut -d/ -f3`
    local resolve_args="--resolve $host:80:$ip_address --resolve $host:443:$ip_address"

    local total_time_ms
    total_time_ms=`timeout $critical_timeout curl $resolve_args -o $output_file -L -s $url -w "%{time_total}\n" --retry 1`
    check_status=$?

    if [ $check_status -eq 124 ]; then
        ERROR_STRING="Layer $layer_name exceeded critical timeout (${critical_timeout}s), check $url | $PERF_DATA"
        return 2 # 2 for CRITICAL
    elif [ $check_status -ne 0 ]; then
        ERROR_STRING="curl error"
        return 2 # 2 for CRITICAL
    fi

    local -i total_time_s=`echo $total_time_ms | cut -d. -f1`
    PERF_DATA="time=${total_time_ms}s"

    if [ $total_time_s -gt $warning_timeout ]; then
        ERROR_STRING="Layer $layer_name exceeded warning timeout (${warning_timeout}s), check $url | $PERF_DATA"
        return 1
    fi

    ERROR_STRING="Layer $layer_name is OK | $PERF_DATA"
}

# prints usage and exit
usage() {
    echo "Usage: $0 [OPTIONS]... "
    echo "Checks a GeoServer layer."
    echo "
Options:
  -I, --ip-address           IP adddress of server.
  -u, --url                  GeoServer base URL.
  -t, --type                 Layer type (wfs, wms, wcs).
  -n, --namespace            Layer namespace.
  -w, --warning-timeout      Warning timeout.
  -c, --critical-timeout     Critical timeout.
  -l, --layer                Layer name.
  -o, --no-cache             Avoid being cached by appending suffix to request."
    exit 3
}

# "$@" - parameters, see usage
main() {
    # parse options with getopt
    local tmp_getops=`getopt -o hI:u:t:n:l:w:c:o --long help,ip-address:,url:,type:,namespace:,layer:,warning-timeout:,critical-timeout:,no-cache -- "$@"`
    [ $? != 0 ] && usage

    eval set -- "$tmp_getops"
    local url type namespace layer ip_address
    local -i warning_timeout=5
    local -i critical_timeout=10
    local -i no_cache=0

    # parse the options
    while true ; do
        case "$1" in
            -h|--help) usage;;
            -I|--ip-adress) ip_address="$2"; shift 2;;
            -u|--url) url="$2"; shift 2;;
            -t|--type) type="$2"; shift 2;;
            -n|--namespace) namespace="$2"; shift 2;;
            -l|--layer) layer="$2"; shift 2;;
            -w|--warning-timeout) warning_timeout=$2; shift 2;;
            -c|--critical-timeout) critical_timeout=$2; shift 2;;
            -o|--no-cache) no_cache=1; shift 1;;
            --) shift; break;;
            *) usage;;
        esac
    done

    [ x"$ip_address" = x ] && usage
    [ x"$url" = x ] && usage
    [ x"$type" = x ] && usage
    [ x"$namespace" = x ] && usage
    [ x"$layer" = x ] && usage

    check_geoserver_layer $ip_address "$url" $type $namespace $layer $warning_timeout $critical_timeout $no_cache
    local -i retval=$?

    if [ $retval -ge 2 ]; then
        echo "Critical: $ERROR_STRING"
    elif [ $retval -eq 1 ]; then
        echo "Warning: $ERROR_STRING"
    else
        echo "OK: $ERROR_STRING"
    fi
    return $retval
}

main "$@"
