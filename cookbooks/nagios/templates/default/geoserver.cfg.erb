# GeoServer definitions
#
# Autogenerated by Chef.

<%
geoserver_layers = {}

@nodes.each do |n|
  host_name = node['nagios']['server']['normalize_hostname'] ? n[node['nagios']['host_name_attribute']].downcase : n[node['nagios']['host_name_attribute']]

  geoserver_layers[host_name] = {}

  # find monitored geoserver hosts
  if n['webapps'] and n['webapps']['instances']
    n['webapps']['instances'].each do |webapp_instance|

      app_vhost       = webapp_instance['vhost']
      webapp_instance['apps'].each do |application|
        if application['name'].start_with?('geoserver')

          geoserver_url = "http://#{app_vhost}/#{application['name']}"

          if node['vagrant']
            Chef::Log.warn("Geoserver layer probing is disabled on mocked vagrant machines")
            geoserver_layers[host_name][geoserver_url] = []
          else
            geoserver_layers[host_name][geoserver_url] =
              @geoserver_helper.get_layers_for_application(application)
          end

        end
      end
    end
  end
end

# build the actual template
geoserver_layers.each do |host_name, geoserver_urls|
  geoserver_urls.each do |geoserver_url, geoserver_layers_info|
    geoserver_layers_info.each do |layer_info|
      crit_timeout = layer_info['crit_timeout'] || 10
      warn_timeout = layer_info['warn_timeout'] || 5
      type         = layer_info['type']
      workspace    = layer_info['workspace']
      name         = layer_info['name']
      no_cache     = layer_info['no_cache']
%>
define service {
  service_description geoserver <%= type %>:<%= workspace %>:<%= name %>
  check_command check_geoserver_layer!<%= crit_timeout %>!<%= warn_timeout %>!<%= geoserver_url %>!<%= type %>!<%= workspace %>!<%= name %>!<%= no_cache ? "-o" : "" %>
  host_name <%= host_name %>
  use service-geoserver
  servicegroups geoserver
}

<%
    end
  end
end
%>

