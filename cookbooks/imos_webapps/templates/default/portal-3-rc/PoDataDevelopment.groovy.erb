grails.serverURL = "<%= @custom_parameters['https'] ? 'https' : 'http' %>://<%= @custom_parameters['vhost'] %>/<%= @custom_parameters['name'] %>"
wmsScanner.url = "http://10.11.12.13/wmsscanner/"
wfsScanner.url = "http://10.11.12.13/wfsscanner/"
gogoduck.url = "http://10.11.12.13/gogoduck"
geonetwork.url = "http://10.11.12.13/geonetwork"

dataSource {
    jndiName = "java:comp/env/<%= @jndi_resources[0]['resource'] %>"
}

portal {
    instance {
        name = "IMOS"
        css = "/<%= @custom_parameters['name'] %>/css/IMOS.css"
    }

    header {
        logo = "IMOS_logo.png"
        externalLinks = [
            [
                linkText: "eMII",
                tooltipText: "e-Marine Information Infrastructure",
                href: "http://www.emii.org.au"
            ],
            [
                linkText: "AODN",
                tooltipText: "Australian Ocean Data Network",
                href: "http://imos.org.au/aodn.html"
            ],
            [
                linkText: "Help",
                tooltipText: "Portal help files",
                href: help.url
            ]
        ]
    }
    systemEmail {
        fromAddress = "info@emii.org.au"
    }
}

// OpenID
openId {
    // openID provider details to support login popup etc
    providers = [
        [name: "eMII", iconHref: "images/AODNfavicon.ico", supportsProviderLogout: true, providerHref: "https://openid.emii.org.au"],
        [name: "Google", iconHref: "images/openid_icons/Google.png", supportsProviderLogout: false, providerHref: "https://www.google.com/accounts/o8/id"],
        [name: "Yahoo", iconHref: "images/openid_icons/Yahoo.png", supportsProviderLogout: false, providerHref: "https://me.yahoo.com/"],
    ]

    // Enable user to supply their their own OpenId url via textfield in popup list
    enableUserSuppliedProvider = true

    // Specify provider to work with register button/link (not an OpenId standard)
    registerProvider = providers.first()
}

log4j = {
  appenders {

    console name:'stdout', layout: pattern(conversionPattern: "%-5p %d [%-12t] %30.30c %X{userInfoForFile}- %m%n")

        <% unless @nsca_password %>
      def md = grails.util.Metadata.current
      def mailLayoutPattern = """\
Timestamp: %d
Site: $grails.serverURL
Instance name: $portal.instance.name
Environment: ${Environment.current.name}
Version: ${md.'app.version'}
Build date: ${md.'app.build.date'}
Build: #${md.'app.build.number'}
SVN revision: #${md.'app.svn.revision'}
Client address: %X{clientAddress}
User-agent: %X{userAgent}
%X{userInfoForEmail}Thread: %t
Level: %p
Logger: %c
Message: %m\
""".replaceAll( "\n", "%n" )

      def emailAppender = new org.apache.log4j.net.SMTPAppender(
        name: 'mail',
        from: "sys.admin@emii.org.au",
        SMTPHost: "localhost",
        bufferSize: 1,
        // SMTPDebug: true,
        layout: pattern( conversionPattern: mailLayoutPattern ) )

      emailAppender.subject = "Error on AODN Portal release candidate instance ${grails.serverURL}"
      emailAppender.to = "developers@emii.org.au"
      appender emailAppender

        <% else %>

      appender new de.viaboxx.nagios.NagiosAppender(
        name: 'nagiosAppender',
        nagiosHost: 'status.emii.org.au',
        nagiosPort: 5667,
        nagiosEncryption: "TRIPLE_DES",
        nagiosPassword: "<%= @nsca_password %>",
        monitoredServiceName: "<%= @nsca_service_name %>",
        monitoredHostName: "<%= @nsca_host_name %>"
      )
    <% end %>
  }

  root {
    <% unless @nsca_password %>
      error 'stdout', 'mail'
    <% else %>
      error 'stdout', 'nagiosAppender'
    <% end %>
  }


    error 'org.codehaus.groovy.grails.web.servlet',  //  controllers
          'org.codehaus.groovy.grails.web.pages', //  GSP
          'org.codehaus.groovy.grails.web.sitemesh', //  layouts
          'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping
          'org.codehaus.groovy.grails.web.mapping', // URL mapping
          'org.codehaus.groovy.grails.commons', // core / classloading
          'org.codehaus.groovy.grails.plugins', // plugins
          'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration
          'org.springframework',
          'org.hibernate',
          'net.sf.ehcache.hibernate',
          'org.grails.plugin.resource.ResourceMeta'

    warn  'org.mortbay.log'

    info  'grails.app.tagLib',
          'grails.app.filters',
          'grails.app.controller',
          'grails.app.service',
          'grails.app.job',
          'grails.app.domain',
          'grails.app.realms',
          'au.org.emii.portal.display.MenuJsonCache',
          'org.apache.shiro'

    debug 'grails.app.domain.au.org.emii.portal.Menu',
          'grails.app.domain.au.org.emii.portal.Server'
}
